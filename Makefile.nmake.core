# Makefile.nmake.core
# Written by Roy Ivy III (https://github.com/rivy)
## emacs -*- mode: perl -*- ## modeline
## makefile:spell-checker:words CC CFLAGS COPTS CPP CPPFLAGS ENDIF IFDEF IFNDEF LD LDFLAGS LDOPTS MAKEDIR MAKEFLAGS NDEBUG OBJS RC RCFLAGS RCOPTS REZS SRCS UNDEF realclean veryclean
## spell-checker:words MSVC nologo mkdir rmdir MAINT findstr delims nowin

####

#CC=cl      # predefined by `nmake`
#CPP=cl     # predefined by `nmake`
#RC=rc      # predefined by `nmake`
LD=link

!IFNDEF MAKE
MAKE=nmake
!ENDIF

FIND=$(SYSTEMROOT)\System32\find
FINDSTR=$(SYSTEMROOT)\System32\findstr
MORE=$(SYSTEMROOT)\System32\more
SORT=$(SYSTEMROOT)\System32\sort

####

!IF "$(BUILD_DIR)" == ""
!UNDEF BUILD_DIR ## might otherwise be read-only if defined on command line
BUILD_DIR=.\^#build
!ENDIF

!IF "$(BUILD_HELP_ALIAS)" == ""
# used to generate help usage information
!UNDEF BUILD_HELP_ALIAS ## might otherwise be read-only if defined on command line
BUILD_HELP_ALIAS=$(MAKE) /F $(ME_FILENAME)
!ENDIF

!IF "$(BUILD_RANDOM)" == ""
# use of the optional $(BUILD_RANDOM), set prior to calling `nmake`, can minimize risk of collisions when multiprocessing
!UNDEF BUILD_RANDOM ## might otherwise be read-only if defined on command line
BUILD_RANDOM=0
!ENDIF

!IF "$(BUILD_STATIC)" == ""
# default to static builds
!UNDEF BUILD_STATIC ## might otherwise be read-only if defined on command line
BUILD_STATIC=1
!ENDIF

!IF "$(CFG)" == ""
!UNDEF CFG  ## might otherwise be read-only if defined on command line
CFG=release
!ENDIF

!IF "$(TYPE)" == ""
!UNDEF TYPE ## might otherwise be read-only if defined on command line
TYPE=.exe
!ENDIF

#### generate dynamic variables

# NOTE: $(BUILD_DIR) may contain special `nmake` characters (eg, '#'), making later use (eg, "!INCLUDE $(BUILD_DIR)\$(FILE)") impossible
#   ... $(TEMP_DIR), by using $(TEMP), should be safer to use (eg, for $(ME_setup_vars) and $(ME_setup_rules))
TEMP_DIR=$(TEMP)\$(NAME).$(ME_FILENAME).$(BUILD_RANDOM)

# test compiler availability
HAVE_CC=true
!IF ([ \
	$(CC) >NUL 2>NUL \
	] != 0)
HAVE_CC=
CC_VERSION=0
!ENDIF

# create temporary files for later dynamic inclusion
ME_setup_vars=$(TEMP_DIR)\$(ME_FILENAME).vars
ME_setup_rules=$(TEMP_DIR)\$(ME_FILENAME).rules
!IF ([ \
	@if not exist "$(TEMP_DIR)" @( mkdir "$(TEMP_DIR)" ) else @( echo>NUL ) && @( \
		echo|set /p OUTPUT="" >"$(ME_setup_vars)" \
	 && echo|set /p OUTPUT="" >"$(ME_setup_rules)" \
		)\
	] == 0)
!ELSE
!ERROR unable to generate temporary files ("$(ME_setup_vars)", "$(ME_setup_rules)")
!ENDIF

# # determine `cwd`
# ERR_CALC_CWD=error finding CWD
# !IF ([ \
#   @echo _CWD=%CD% >> "$(ME_setup_vars)" \
#   ] == 0)
# !ELSE
# !ERROR $(ERR_CALC_CWD)
# !ENDIF
CWD=$(MAKEDIR)

# determine `cl` version
# * needed to determine if using VC6 or a more modern VC version
# [ref] http://stackoverflow.com/questions/26878278/microsoft-nmake-is-it-possible-to-define-macros-from-shell-command-output/27646085#27646085
# [ref] http://stackoverflow.com/questions/2806325/nmake-exe-is-there-a-way-to-exclude-a-file-from-a-set-of-files-specified-in-a-m/2806609#2806609
# MAINT:* [2016-02] current algorithm works for `cl` v12 (as "1200"; aka VS6/VC6/1998) through v19 (as "1900", aka VS14/VC14/2015); dependent on output of `cl`, which *has* changed between versions
ERR_CALC_COMPILER_VERSION=ERR!: unable to parse compiler version
!IF ([ \
	@( for /f "tokens=6-10 delims=. " %g in ('$(CC) 2^>^&1 ^| "$(FINDSTR)" /I /C:"Version"') do \
		@(  if /I "%g"=="Version" ( \
				@echo CC_VERSION=%h%i >> "$(ME_setup_vars)" \
			) else if /I "%h"=="Version" ( \
				@echo CC_VERSION=%i%j >> "$(ME_setup_vars)" \
			) else @echo CC_VERSION=0 >> "$(ME_setup_vars)" \
		 ) \
	 ) ||  @echo CC_VERSION=0 >> "$(ME_setup_vars)" \
	] == 0)
!ELSE
!ERROR $(ERR_CALC_COMPILER_VERSION)
!ENDIF

# determine source, intermediate, and test file paths; also, generate per file make rules
# * make construction recipes
CC_RECIPE=$$^(CC^) $$^(CFLAGS^)     # .c files
CPP_RECIPE=$$^(CPP^) $$^(CFLAGS^)   # .cpp/.cxx/.c++/.cc files
RC_RECIPE=$$^(RC^) $$^(RCFLAGS^)    # .rc resource files
# * resultant directories and files
# ** NOTE: REZ == resource source file; RES == intermediate compiled resource object file
SRC_dirs=
SRC_files=
OBJ_files=
REZ_dirs=
REZ_files=
RES_files=
TEST_files=
ERR_FIND_FILES=ERR!: error calculating project source, intermediaries, and test files
!IF ([ \
	@echo OUT_DIR=$$(BUILD_DIR)\$$(CFG).(cl@$$(CC_VERSION)) >> "$(ME_setup_vars)" && \
	@echo INT_DIR=$$(OUT_DIR)\obj >> "$(ME_setup_vars)" \
	] == 0)
!ELSE
!ERROR $(ERR_FIND_FILES)
!ENDIF
!IF ([ \
	@for %g in ($(SRCS)) do @( \
		@echo SRC_dirs=$$^(SRC_dirs^) "%~dpg" >> "$(ME_setup_vars)" \
	 && @echo SRC_files=$$^(SRC_files^) "%~g" >> "$(ME_setup_vars)" \
	 && @echo OBJ_files=$$^(OBJ_files^) "$$(INT_DIR)\%~ng.obj" >> "$(ME_setup_vars)" \
	 && @( if /I "%~xg" == ".c"   @echo $$^(INT_DIR^)\%~ng.obj: "%~g" ; $(CC_RECIPE) "%~g"  >> "$(ME_setup_rules)" ) \
	 && @( if /I "%~xg" == ".cpp" @echo $$^(INT_DIR^)\%~ng.obj: "%~g" ; $(CPP_RECIPE) "%~g" >> "$(ME_setup_rules)" ) \
	 && @( if /I "%~xg" == ".cxx" @echo $$^(INT_DIR^)\%~ng.obj: "%~g" ; $(CPP_RECIPE) "%~g" >> "$(ME_setup_rules)" ) \
	 && @( if /I "%~xg" == ".c++" @echo $$^(INT_DIR^)\%~ng.obj: "%~g" ; $(CPP_RECIPE) "%~g" >> "$(ME_setup_rules)" ) \
	 && @( if /I "%~xg" == ".cc"  @echo $$^(INT_DIR^)\%~ng.obj: "%~g" ; $(CPP_RECIPE) "%~g" >> "$(ME_setup_rules)" ) \
		) \
	] == 0)
!ELSE
!ERROR $(ERR_FIND_FILES)
!ENDIF
!IF ([ \
	@for %g in ($(REZS)) do @( \
		@echo REZ_dirs=$$^(REZ_dirs^) "%~dpg" >> "$(ME_setup_vars)" \
	 && @echo REZ_files=$$^(REZ_files^) "%~g" >> "$(ME_setup_vars)" \
	 && @echo RES_files=$$^(RES_files^) "$$(INT_DIR)\%~ng.res" >> "$(ME_setup_vars)" \
	 && @echo $$^(INT_DIR^)\%~ng.res: "%~g" ; $(RC_RECIPE) "%~g" >> "$(ME_setup_rules)" \
		) \
	] == 0)
!ELSE
!ERROR $(ERR_FIND_FILES)
!ENDIF
!IF ([ \
	@for %g in ($(TESTS)) do @echo TEST_files=$$^(TEST_files^) "%~g" >> "$(ME_setup_vars)" \
	] == 0)
!ELSE
!ERROR $(ERR_FIND_FILES)
!ENDIF

!INCLUDE $(ME_setup_vars)   # include auto-generated variables

PROJECT_DIR=$(CWD)
PROJECT_TARGET=$(OUT_DIR)\$(NAME)$(TYPE)

OBJ_files_rsp=$(OUT_DIR)\$(NAME).obj_files.rsp  # OBJ file list for use as a response file
RES_files_rsp=$(OUT_DIR)\$(NAME).res_files.rsp  # RES (compiled resource) file list for use as a response file

####

!IF $(CC_VERSION) >= 1300
BUILD_USING_VC6=0
!ELSE
BUILD_USING_VC6=1
!ENDIF

COPTS_basic=/nologo /W4 /Gm-

!IF $(CC_VERSION) < 1500
RCOPTS_vc=
!ELSE
RCOPTS_vc=/nologo
!ENDIF

!IF $(CC_VERSION) < 1600
# Visual Studio 2008 (aka, MSVC 9, `cl` version "15xx") (or earlier) supports creating
# apps that run on Windows 95/98/ME, Windows NT, and Windows Server 2000.
SUBSYSTEM_VERSION=4.00   # Minimum supported subsystem is Win9x/NT (4.00)
!ELSE
# Visual Studio 2010 (aka, MSVC 10, `cl` version "16xx") (or later) does *not* support
# creating apps that run on Windows 9x, NT, or Windows Server 2000.
SUBSYSTEM_VERSION=5.01   # Minimum supported subsystem is Windows XP (5.01)
!ENDIF

!IF "$(BUILD_USING_VC6)" == "1"
LDOPTS_vc=/opt:nowin98 /ignore:4254
!ELSE
LDOPTS_vc=/version:4.00
!ENDIF

## settings for `CFG=debug`

!IF "$(CFG)" == "debug"

COPTS_basic_CFG=/Zi /Od /D _DEBUG

!IF "$(BUILD_STATIC)" == "1"
COPTS_static_CFG=/MTd
!ELSE
COPTS_static_CFG=/MDd
!ENDIF

!IF "$(BUILD_USING_VC6)" == "1"
COPTS_vc_CFG=/GZ
!ELSE
COPTS_vc_CFG=/MP /RTC1
!ENDIF

RCOPTS_basic_CFG=/d _DEBUG

LDOPTS_basic_CFG=/debug /pdb:"$(OUT_DIR)\$(NAME).pdb"

!ENDIF

## settings for `CFG=release`

!IF "$(CFG)" == "release"

COPTS_basic_CFG=/WX /Os /Ob1 /Gy /D NDEBUG /GF

!IF "$(BUILD_STATIC)" == "1"
COPTS_static_CFG=/MT
!ELSE
COPTS_static_CFG=/MD
!ENDIF

!IF "$(BUILD_USING_VC6)" == "1"
COPTS_vc_CFG=/Zd /Og
!ELSE
COPTS_vc_CFG=/MP /GS-
!ENDIF

RCOPTS_basic_CFG=/d NDEBUG

LDOPTS_basic_CFG=/opt:ref,icf

!ENDIF

####

CFLAGS=$(COPTS_basic) $(COPTS_basic_CFG) $(COPTS_static_CFG) $(COPTS_vc_CFG) \
	   $(DEFS) $(INCLUDES) \
	   /Fo"$(INT_DIR)"\ /Fd"$(INT_DIR)"\ /c

RCFLAGS=/l 0x409 $(RCOPTS_basic_CFG) $(RCOPTS_vc) /fo"$(INT_DIR)\$(NAME).res"

LDFLAGS=$(LIBS) /nologo /incremental:no /base:"0x20000000" \
		/machine:I386 /subsystem:console,$(SUBSYSTEM_VERSION) /out:"$(OUT_DIR)\$(NAME)$(TYPE)" /release \
		$(LDOPTS_basic_CFG) $(LDOPTS_vc) /map:"$(OUT_DIR)\$(NAME).map"

####

# default target
# * `nmake`, when no target is specified, defaults to making the first valid target specifier
"$(PROJECT_TARGET)": "$(INT_DIR)" "$(OUT_DIR)" $(SRC_files) "$(OBJ_files_rsp)" "$(RES_files_rsp)"
	$(LD) $(LDFLAGS) @"$(OBJ_files_rsp)" @"$(RES_files_rsp)"

####

!INCLUDE $(ME_setup_rules)  # auto-generated make rules/recipes; should be included after the "default target" to allow for a "default target"

####

# debugging info display

!IF ("$(BUILD_DEBUG)" != "" && "$(BUILD_DEBUG)" != "0") || ("$(MAKE_DEBUG)" != "" && "$(MAKE_DEBUG)" != "0")
!MESSAGE NAME=$(NAME)
!MESSAGE TYPE=$(TYPE)
!MESSAGE CFG=$(CFG)
!MESSAGE CWD=$(CWD)
!MESSAGE PROJECT_DIR=$(PROJECT_DIR)
!MESSAGE PROJECT_TARGET=$(PROJECT_TARGET)
!MESSAGE BUILD_DEBUG=$(BUILD_DEBUG)
!MESSAGE BUILD_DIR=$(BUILD_DIR)
!MESSAGE BUILD_HELP_ALIAS=$(BUILD_HELP_ALIAS)
!MESSAGE BUILD_STATIC=$(BUILD_STATIC)
!MESSAGE CC=$(CC)
!MESSAGE CC_VERSION=$(CC_VERSION)
!MESSAGE CFLAGS=$(CFLAGS)
!MESSAGE CPP=$(CPP)
!MESSAGE FILE_NMAKE_CORE=$(FILE_NMAKE_CORE)
!MESSAGE FIND=$(FIND)
!MESSAGE FINDSTR=$(FINDSTR)
!MESSAGE HAVE_CC=$(HAVE_CC)
!MESSAGE INT_DIR=$(INT_DIR)
!MESSAGE LD=$(LD)
!MESSAGE LD=$(LDFLAGS)
!MESSAGE MAKE=$(MAKE)
!MESSAGE MAKE_DEBUG=$(MAKE_DEBUG)
!MESSAGE MAKEDIR=$(MAKEDIR)
!MESSAGE MAKEFLAGS=/$(MAKEFLAGS)
!MESSAGE MORE=$(MORE)
!MESSAGE ME_FILENAME=$(ME_FILENAME)
!MESSAGE OUT_DIR=$(OUT_DIR)
!MESSAGE RC=$(RC)
!MESSAGE RCFLAGS=$(RCFLAGS)
!MESSAGE SORT=$(SORT)
!MESSAGE TEST_VERBOSE=$(TEST_VERBOSE)
!MESSAGE TEMP_DIR=$(TEMP_DIR)
!ENDIF

# cleanup temporary file(s)

!IF (DEFINED( BUILD_DEBUG ) && "$(BUILD_DEBUG)" != "0") || (DEFINED(MAKE_DEBUG) && "$(MAKE_DEBUG)" != "0")
!MESSAGE debug: setup files ("$(ME_setup_vars)", "$(ME_setup_rules)") saved for reference
!ELSE
!IF ([ \
	@if exist "$(ME_setup_vars)" @( erase /q "$(ME_setup_vars)" ) && \
	@if exist "$(ME_setup_rules)" @( erase /q "$(ME_setup_rules)" ) \
	] == 0)
!ELSE
!ERROR unable to erase temporary file "$(ME_setup_vars)"
!ENDIF
!IF ([ \
	@for /f %g in ('dir /a/b "$(TEMP_DIR)" 2^>NUL ^| "$(FIND)" /C /V ""') do \
		@(if /I "%g"=="0" ( \
			rmdir /s/q "$(TEMP_DIR)" \
		)) \
	] == 0)
!ELSE
!MESSAGE unable to erase temporary directory "$(TEMP_DIR)"
!ENDIF
!ENDIF

#### errors

!IF "$(CFG)" != "release" && "$(CFG)" != "debug"
!ERROR An invalid configuration ("$(CFG)") was specified. Use "debug", "release", or "" (which will default to "release").
!ENDIF

!IF "$(HAVE_CC)" == ""
!ERROR missing required compiler (`$(CC)`)
!ENDIF

#### warnings

!IF "$(CC_VERSION)" == "0"
!MESSAGE WARN: unable to parse `$(CC)` version (may require parsing logic update [see MAINT]).
!ENDIF

#### targets

release:  ## Build "CFG=release" project configuration
	@$(MAKE) /nologo /$(MAKEFLAGS) CFG="release" /f "$(ME_FILENAME)"

debug:  ## Build "CFG=debug" project configuration
	@$(MAKE) /nologo /$(MAKEFLAGS) CFG="debug" /f "$(ME_FILENAME)"

##

test: "$(CFG)"  ## Test project
	@echo # testing: "$(CFG)"; "$(TARGET)"
	@echo."test failure" >NUL & @( \
	    set "CFG=$(CFG)" & set "OUT_DIR=$(OUT_DIR)" & set "PROJECT_DIR=$(PROJECT_DIR)" & set "PROJECT_TARGET=$(PROJECT_TARGET)" \
	  & set "TEST_VERBOSE=$(TEST_VERBOSE)" \
	  & set "N_FAILs=" & set N_TESTs=0 \
	  & @( for %g in ($(TEST_files)) do \
			@( set /a N_TESTs=N_TESTS+1 >NUL \
			& ( echo|set /P OUTPUT="# invoking '%~g' " ) \
			& @( if DEFINED TEST_VERBOSE ( echo. & call "%~g" && echo # '%g' .. passed || (set /a N_FAILs=N_FAILs+1 >NUL & echo # '%g' .. FAILED )  )  )\
			& @( if NOT DEFINED TEST_VERBOSE call "%~g" >NUL && echo .. passed || (set /a N_FAILs=N_FAILs+1 >NUL & echo .. FAILED) ) \
			)) \
	  & @( if DEFINED N_FAILs call echo FAILED [^%N_FAILs^% of ^%N_TESTs^% test^(s^) failed] ) \
	  & @( if NOT DEFINED N_FAILs call echo PASSED [^%N_TESTs^% test^(s^) passed] ) \
	  & call exit %N_FAILs% \
	)

##

all: debug release  ## Build all project configurations

build: $(PROJECT_TARGET) ## Build project

clean:  ## Remove build artifacts (including intermediate files)
	@if exist "$(INT_DIR)" ( rmdir /s/q "$(INT_DIR)" && echo "$(INT_DIR)" removed )
	@if exist "$(OUT_DIR)" ( rmdir /s/q "$(OUT_DIR)" && echo "$(OUT_DIR)" removed )

rebuild: clean build  ## Clean and rebuild project

realclean: clean  ## Remove *all* build artifacts (including all configurations and the build directory)
	@if exist "$(BUILD_DIR)" ( rmdir /s/q "$(BUILD_DIR)" && echo "$(BUILD_DIR)" removed )

help:
	@echo: & @echo usage: `$(BUILD_HELP_ALIAS) [TARGET [TARGET]...]`
	@echo builds `$(NAME)$(TYPE)` to "$(MAKEDIR)\$(OUT_DIR)"
	@echo: & @echo [valid TARGETs] & @echo:
	@"$(FINDSTR)" "^[a-zA-Z-]*:" "$(FILE_NMAKE_CORE)" | "$(SORT)" | for /f "tokens=1-2,* delims=:#" %g in ('$(MORE)') do @(@set "t=%g                " & @call echo ^%t:~0,15^% %i)

##

"$(BUILD_DIR)":
	@if not exist "$(BUILD_DIR)" mkdir "$(BUILD_DIR)"

"$(INT_DIR)": "$(BUILD_DIR)"
	@if not exist "$(INT_DIR)" mkdir "$(INT_DIR)"

"$(OUT_DIR)": "$(BUILD_DIR)"
	@if not exist "$(OUT_DIR)" mkdir "$(OUT_DIR)"

##

"$(OBJ_files_rsp)": $(OBJ_files)
	@copy  <<  "$(OBJ_files_rsp)" >NUL
$(OBJ_files)
<<
	@echo Created object file list (response file; "$(OBJ_files_rsp)")

"$(RES_files_rsp)": $(RES_files)
	@copy  <<  "$(RES_files_rsp)" >NUL
$(RES_files)
<<
	@echo Created compiled resource file list (response file; "$(RES_files_rsp)")

##

## .PHONY: default_target release debug all clean help build rebuild realclean /init "$(NAME)" "$(NAME)$(TYPE)"
